Git 은 프로젝트의 버전 관리를 위한 도구로 버전 관리를 할 수 있으며 무슨 작업을 했는지 히스토리도 한 눈에 볼 수 있다.

협업해서 하나의 프로젝트를 만드는데 유용하다.



#버전 관리 : 누가, 언제, 현재 프로젝트의 내용이 어떤지 정보를 남긴다는 것



#commit : 현재 프로젝트의 상태를 저장한다. Git 이 이전 commit(이전에 저장한 프로젝트의 상태)를 알고 있으므로 자동으로 어떤 부분이 바뀌었는지 알려준다. 누가, 언제, 어떤 부분을 바꾸었는지 확인해볼 수 있다.



#add (또는 staging, 스테이징) : 여러파일 중 내가 commit 하기 위한 파일만 선택하는 것.

add(staging) 를 사용하면, 컴퓨터에서 여러 파일을 수정했어도 '기능 A 수정' 에 관련된 파일만 골라서 commit 할 수 있다. 작업 내역을 깔끔하게 관리하기 위해서는 꼭 아래와 같이 commit하자!

- 내가 기록할 작업 내역이 무엇인지 생각하고,

- 관련된 파일만 add 해서

- 작업내역을 나타내는 commit 메시지 적기!



#원격 repo와 로컬 repo

'Git으로 관리되는 프로젝트' 를 Git 에서는 repo(리포, repository 리포지토리의 약자) 라고 부른다.

로컬 repo(local repository) : 내 컴퓨터에 저장되어있는 리포지토리

원격 repo(remote repository) : Github 처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는 것

추적(Tracking, 트랙킹 / branch tracking) : 로컬 repo 가 원격 repo 를 연결하는 것



#push(푸쉬) 와 pull(풀) // 로컬 repo 를 기준으로 생각한다!

push(푸쉬) : 로컬 repo 의 commit 들을 원격 repo 에 반영하는 것. commit들을 밀어넣기!

pull(풀) : 원격 repo 의 commit 들을 로컬 repo 에 반영하는 것. commit들을 땡겨오기!



# clone(클론, 복제)

원격 repo 를 내 컴퓨터에서도 사용할 수 있도록 가져올 수도 있다.. 일종의 초기 다운로드라고 생각하면 된다.



#초심자를 위한 꿀 패턴! pull - commit - push

혼자 Git 프로젝트 작업을 할 때는 pull -> 로컬 repo commit -> push 순서로 하면 좋다.



##총 정리 개념

버전 관리: 프로젝트 상태가 변경되는 정보를 알고 있다는 것. Git 은 가장 널리 쓰이는 버전관리 도구 중에 하나로 commit 을 사용해서 버전이 달라지는 것을 관리한다..
git 초기화(git initialize) : 컴퓨터에 있는 프로젝트를 Git 이 관리하는 프로젝트로 만들 수 있다. 앞으로 Git 으로 관리할꺼야! 하고 설정해주면 된다. 이 작업을 git 초기화(git initialize) 한다고 표현한다.
commit : 현재 프로젝트의 상태를 찰칵 저장하는 것을 commit 이라고 한다.
누가(author), 언제 commit 했는지의 정보와 프로젝트 변경 내용
작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지를 'commit 메시지'.
add (혹은 staging, 스테이징) : commit 에 반영할지 안할지는 파일 단위로 선택할 수 있다.  commit 에 반영할 파일을 선택하는 것
commit history : commit 한 순서대로 리스트. 역사!
repo : 'Git으로 관리되는 프로젝트' 를 Git 에서는 repo(리포, repository 리포지토리의 약자) 라고 부른다. 내 컴퓨터에 저장되어있는 리포지토리를 로컬 repo(local repository) 라고 한다. Github 처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는 것을 원격 repo(remote repository) 라고 한다.
Tracking(추적) : 로컬 repo 와 원격 repo 를 연결한다!
push : 로컬 repo 의 commit 들을 원격 repo 에 반영하기(push)! 밀어넣기. 원격 repo 에 없는 즉,새로운 commit 내역을 모두 원격 repo 에 한 번에 반영한다.
pull : 원격 repo 의 commit 들을 로컬 repo 로 반영하기(pull)! 땡겨오기. 로컬 repo 에 없는 즉,새로운 commit 내역을 모두 로컬 repo 에 한 번에 반영한다.