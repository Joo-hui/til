사실 이전 국비 지원하면서 git bash로 배워서 좀 썼었는데 (당연히 그때 어려웠다...)

지금은 Sourcetree 이용해서 사용하고 있는데 이거 너무 좋은거 같아. 명령어들을 따로 안외우고 화면에 보이는 버튼을 눌러서 그냥 하기만 하면 된다. 아직까지는 굉장히 따라하기 쉽고 이해하기 편하다!



무튼 2주차에 배운거 정리!



#협업위한 Git 배우기!

1단계. 누가 이 작업 할 것인지 정한다. - Issue

2단계. 각자 맡은 것을 작업한다. - Branch

3단계. 각자 작업을 프로젝트에 합친다. - merge

(경우에 따라). 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다. - PR 후 merge



Github 외에도 많이 쓰이는 이슈 관리를 할 수 있는 도구는 Jira, Trello, YouTrack 등이 있다.

이런 도구를 이슈를 추적(tracking)하면서 관리할 수 있다고 해서 이슈 트래커(issue tracker) 또는 이슈 추적도구(Issue Tracking Tool, 이슈 트래킹 툴) 라고 부른다고 한다.



issue를 만들고 commit할때 issue번호를 포함한다! ( issue 가 무엇인지 알려줄 수 있다)



#각자 공간에서 작업하기 - Branch - 개념

위에서 정한 작업방식 중 2단계 각자 작업을 할 수 있는 공간을 만들기 위해 branch를 사용한다.

브랜치(Branch)를 사용하게 되면 나뭇가지가 뻗어나오듯 기능에 맞게 나누어 작업할 수 있다. 



#각자 공간에서 작업하기 - Branch - 정리

브랜치 삭제하기 - 에러나면 참고!

삭제할 브랜치는 체크아웃(현재 작업 중인) 브랜치가 아니어야 하기 때문에 다른 브랜치 이름을 더블 클릭해서 다른 브랜치로 체크아웃해줘야 한다. (강제 삭제 옵션을 선택하면 commit 이 되거나 작업 내역이 있더라도 무조건 삭제된다.)



#작업 내용 합치기 - Merge(병합) -개념

위에서 정한 작업방식 중 3단계 각자 작업한 것을 프로젝트를 합치기 위해 Merge 를 사용한다.

Merge(병합) 는 브랜치를 다른 브랜치에 합치는 것이다. 즉, 특정 브랜치의 commit 들을 다른 브랜치의 commit 내역에 모두 반영하는 것이다. 기본적인 설정은 해당 브랜치의 모든 commit 을 모두 다 반영한다고 생각하면 된다!

실제 프로젝트에서는 작업 내역을 모두 합칠 기준이 되는 브랜치를 정해두고 작업한다고 한다.

프로젝트마다 Branch 관리하는 방법이 조금씩 다르다. commit하고 작업하는 방법을 통틀어 flow(흐름) 라고 하며. 대표적으로 github-flow, gitlab-flow, git-flow 가 있어 참고용으로 사용하기 좋다.



*추가자료

- github flow

https://guides.github.com/introduction/flow/
GitHub flow - GitHub Docs

Introduction GitHub flow is a lightweight, branch-based workflow. The GitHub flow is useful for everyone, not just developers. For example, here at GitHub, we use GitHub flow for our site policy, documentation, and roadmap. Prerequisites To follow GitHub f

docs.github.com
- git 사용 flow

https://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/
Git flow, GitHub flow, GitLab flow

Git flow, GitHub flow, GitLab flow 에대해서 좀 알아보자. 머리아프다.

ujuc.github.io


#작업 내용 합치기 - Merge(병합) - 정리와 꿀팁

브랜치의 작업 내역 commit 들을 다른 branch 로 반영(합치기)는 것을 Merge(머지, 병합) 이라고 부른다. 기본적으로 branch 단위로 merge 하게 된다.
개발할 때는 기준이 되는 기본 브랜치를 정해놓고 다른 브랜치들을 기본 브랜치에 merge를 한다.
브랜치명은 규칙을 가지고 잘 이름 지으면 프로젝트 관리가 쉬워진다. 작업이 완료되면 작업한 브랜치는 보통 삭제해줘야 브랜치 설정이 꼬이는 것을 방지할 수 있다.
#인터넷으로 추가 정보 얻기

구글링(Googling)

기술(도구 이름) + 단어 조합으로 하면 훨씬 더 좋은 검색 결과를 얻을 수 있다.

예. sourcetree branch



[검색어 팁]

아래처럼 검색어를 조합해 입력!
기술을 처음 배우고 싶을 때 : '기술이름' + 'tutorial' (예. git tutorial)
기능을 찾을 때 : '기술이름' + 'how to' + '찾을 내용' (예. git how to merge )
어떻게 사용하는지 예제를 보고 싶을 때 : '기술이름' + '내용' + 'example' (예. github flow example)
원하는 사이트명 포함해 검색할 수도 있습니다. (예: stackoverflow git merge - stackoverflow 라는 사이트에서 검색)
[검색 결과 중에, 좋은 자료 고르기]

해결책뿐만 아니라 문제(에러)의 이유까지 적어두어서 내 문제와 같은지 판단할 수 있는 정보를 제공하는 글
신뢰할 수 있는 블로그(tech 회사의 기술 블로그, IT 전문 매거진)
stackoverflow - 개발 QnA 사이트. 전 세계적으로 많이 쓰인다. 질문과 답변, 댓글에 사용자들이 vote 할 수 있고, 좋은 질문과 답변에는 vote 수가 높다.
https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git
How do I undo the most recent local commits in Git?

I accidentally committed the wrong files to Git but didn't push the commit to the server yet. How can I undo those commits from the local repository? The only way seems to be to copy the edits in s...

stackoverflow.com
#충돌 해결하기 - Merge conflict 

Merge 하는 과정에서 같은 파일이 동일한 부분이 수정된 게 발견되면 Merge conflict(병합 충돌) 이 발생한다.
Git 이 똑똑하게 충돌을 파악할 수 있도록 파일 내용을 고쳐서 충돌 내역을 보여준다.
conflict 를 수정하려면 최종적으로 반영할 내역으로 고친 후에 merge commit 하면 된다.
Git 은 <<<<<<< HEAD 와 >>>>>>> feature/jjigae_rtan 이 파일에서 사라지면 충돌이 해결되었다고 판단한다.